// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connect.proto

/*
Package connect is a generated protocol buffer package.

It is generated from these files:
	connect.proto

It has these top-level messages:
	CMD_BASE_CS
	CMD_BASE_SC
	CMD_ERROR_SC
	CMD_AUTH_CS
	CMD_AUTH_SC
	CMD_REPLAY_CS
	CMD_REPLAY_SC
	CMD_LOGIC_CS
	CMD_LOGIC_SC
*/
package connect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandType int32

const (
	CommandType_CMD_ZERO_PLACEHOLDER CommandType = 0
	CommandType_CMD_ERROR            CommandType = 1
	CommandType_CMD_AUTH             CommandType = 16
	CommandType_CMD_REPLAY           CommandType = 18
	CommandType_CMD_LOGIC            CommandType = 96
)

var CommandType_name = map[int32]string{
	0:  "CMD_ZERO_PLACEHOLDER",
	1:  "CMD_ERROR",
	16: "CMD_AUTH",
	18: "CMD_REPLAY",
	96: "CMD_LOGIC",
}
var CommandType_value = map[string]int32{
	"CMD_ZERO_PLACEHOLDER": 0,
	"CMD_ERROR":            1,
	"CMD_AUTH":             16,
	"CMD_REPLAY":           18,
	"CMD_LOGIC":            96,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}
func (CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CMD_BASE_CS struct {
	Cmd  CommandType `protobuf:"varint,1,opt,name=cmd,enum=connect.CommandType" json:"cmd,omitempty"`
	Body []byte      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CMD_BASE_CS) Reset()                    { *m = CMD_BASE_CS{} }
func (m *CMD_BASE_CS) String() string            { return proto.CompactTextString(m) }
func (*CMD_BASE_CS) ProtoMessage()               {}
func (*CMD_BASE_CS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_BASE_CS) GetCmd() CommandType {
	if m != nil {
		return m.Cmd
	}
	return CommandType_CMD_ZERO_PLACEHOLDER
}

func (m *CMD_BASE_CS) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type CMD_BASE_SC struct {
	Cmd     CommandType `protobuf:"varint,1,opt,name=cmd,enum=connect.CommandType" json:"cmd,omitempty"`
	RetCode int32       `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Body    []byte      `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CMD_BASE_SC) Reset()                    { *m = CMD_BASE_SC{} }
func (m *CMD_BASE_SC) String() string            { return proto.CompactTextString(m) }
func (*CMD_BASE_SC) ProtoMessage()               {}
func (*CMD_BASE_SC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_BASE_SC) GetCmd() CommandType {
	if m != nil {
		return m.Cmd
	}
	return CommandType_CMD_ZERO_PLACEHOLDER
}

func (m *CMD_BASE_SC) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CMD_BASE_SC) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type CMD_ERROR_SC struct {
	RetCode     int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	RetCodeDesc string `protobuf:"bytes,2,opt,name=ret_code_desc,json=retCodeDesc" json:"ret_code_desc,omitempty"`
}

func (m *CMD_ERROR_SC) Reset()                    { *m = CMD_ERROR_SC{} }
func (m *CMD_ERROR_SC) String() string            { return proto.CompactTextString(m) }
func (*CMD_ERROR_SC) ProtoMessage()               {}
func (*CMD_ERROR_SC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_ERROR_SC) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CMD_ERROR_SC) GetRetCodeDesc() string {
	if m != nil {
		return m.RetCodeDesc
	}
	return ""
}

type CMD_AUTH_CS struct {
	GameId        int32  `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	IdentityToken string `protobuf:"bytes,2,opt,name=identity_token,json=identityToken" json:"identity_token,omitempty"`
}

func (m *CMD_AUTH_CS) Reset()                    { *m = CMD_AUTH_CS{} }
func (m *CMD_AUTH_CS) String() string            { return proto.CompactTextString(m) }
func (*CMD_AUTH_CS) ProtoMessage()               {}
func (*CMD_AUTH_CS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_AUTH_CS) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *CMD_AUTH_CS) GetIdentityToken() string {
	if m != nil {
		return m.IdentityToken
	}
	return ""
}

type CMD_AUTH_SC struct {
	GameId      int32  `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	RetCode     int32  `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	RetCodeDesc string `protobuf:"bytes,3,opt,name=ret_code_desc,json=retCodeDesc" json:"ret_code_desc,omitempty"`
	SessionId   string `protobuf:"bytes,4,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *CMD_AUTH_SC) Reset()                    { *m = CMD_AUTH_SC{} }
func (m *CMD_AUTH_SC) String() string            { return proto.CompactTextString(m) }
func (*CMD_AUTH_SC) ProtoMessage()               {}
func (*CMD_AUTH_SC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_AUTH_SC) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *CMD_AUTH_SC) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CMD_AUTH_SC) GetRetCodeDesc() string {
	if m != nil {
		return m.RetCodeDesc
	}
	return ""
}

func (m *CMD_AUTH_SC) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type CMD_REPLAY_CS struct {
	AuthChannel int32  `protobuf:"varint,1,opt,name=auth_channel,json=authChannel" json:"auth_channel,omitempty"`
	Account     string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	SessionId   string `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *CMD_REPLAY_CS) Reset()                    { *m = CMD_REPLAY_CS{} }
func (m *CMD_REPLAY_CS) String() string            { return proto.CompactTextString(m) }
func (*CMD_REPLAY_CS) ProtoMessage()               {}
func (*CMD_REPLAY_CS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_REPLAY_CS) GetAuthChannel() int32 {
	if m != nil {
		return m.AuthChannel
	}
	return 0
}

func (m *CMD_REPLAY_CS) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CMD_REPLAY_CS) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type CMD_REPLAY_SC struct {
	RetCode     int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	RetCodeDesc string `protobuf:"bytes,2,opt,name=ret_code_desc,json=retCodeDesc" json:"ret_code_desc,omitempty"`
}

func (m *CMD_REPLAY_SC) Reset()                    { *m = CMD_REPLAY_SC{} }
func (m *CMD_REPLAY_SC) String() string            { return proto.CompactTextString(m) }
func (*CMD_REPLAY_SC) ProtoMessage()               {}
func (*CMD_REPLAY_SC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_REPLAY_SC) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CMD_REPLAY_SC) GetRetCodeDesc() string {
	if m != nil {
		return m.RetCodeDesc
	}
	return ""
}

type CMD_LOGIC_CS struct {
	LogicType uint32 `protobuf:"varint,1,opt,name=logic_type,json=logicType" json:"logic_type,omitempty"`
	LogicPkg  []byte `protobuf:"bytes,2,opt,name=logic_pkg,json=logicPkg,proto3" json:"logic_pkg,omitempty"`
}

func (m *CMD_LOGIC_CS) Reset()                    { *m = CMD_LOGIC_CS{} }
func (m *CMD_LOGIC_CS) String() string            { return proto.CompactTextString(m) }
func (*CMD_LOGIC_CS) ProtoMessage()               {}
func (*CMD_LOGIC_CS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_LOGIC_CS) GetLogicType() uint32 {
	if m != nil {
		return m.LogicType
	}
	return 0
}

func (m *CMD_LOGIC_CS) GetLogicPkg() []byte {
	if m != nil {
		return m.LogicPkg
	}
	return nil
}

type CMD_LOGIC_SC struct {
	LogicType uint32 `protobuf:"varint,1,opt,name=logic_type,json=logicType" json:"logic_type,omitempty"`
	LogicPkg  []byte `protobuf:"bytes,2,opt,name=logic_pkg,json=logicPkg,proto3" json:"logic_pkg,omitempty"`
}

func (m *CMD_LOGIC_SC) Reset()                    { *m = CMD_LOGIC_SC{} }
func (m *CMD_LOGIC_SC) String() string            { return proto.CompactTextString(m) }
func (*CMD_LOGIC_SC) ProtoMessage()               {}
func (*CMD_LOGIC_SC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_LOGIC_SC) GetLogicType() uint32 {
	if m != nil {
		return m.LogicType
	}
	return 0
}

func (m *CMD_LOGIC_SC) GetLogicPkg() []byte {
	if m != nil {
		return m.LogicPkg
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_BASE_CS)(nil), "connect.CMD_BASE_CS")
	proto.RegisterType((*CMD_BASE_SC)(nil), "connect.CMD_BASE_SC")
	proto.RegisterType((*CMD_ERROR_SC)(nil), "connect.CMD_ERROR_SC")
	proto.RegisterType((*CMD_AUTH_CS)(nil), "connect.CMD_AUTH_CS")
	proto.RegisterType((*CMD_AUTH_SC)(nil), "connect.CMD_AUTH_SC")
	proto.RegisterType((*CMD_REPLAY_CS)(nil), "connect.CMD_REPLAY_CS")
	proto.RegisterType((*CMD_REPLAY_SC)(nil), "connect.CMD_REPLAY_SC")
	proto.RegisterType((*CMD_LOGIC_CS)(nil), "connect.CMD_LOGIC_CS")
	proto.RegisterType((*CMD_LOGIC_SC)(nil), "connect.CMD_LOGIC_SC")
	proto.RegisterEnum("connect.CommandType", CommandType_name, CommandType_value)
}

func init() { proto.RegisterFile("connect.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x09, 0x1d, 0x6b, 0xfb, 0xda, 0x54, 0x91, 0x35, 0x89, 0x22, 0x34, 0x69, 0x44, 0x02,
	0x4d, 0x1c, 0x76, 0x80, 0xbf, 0xa0, 0xb8, 0x11, 0x2b, 0x6a, 0x49, 0xe5, 0x94, 0x03, 0x5c, 0x4c,
	0x66, 0x5b, 0x59, 0x94, 0xc5, 0x8e, 0x1a, 0xef, 0x90, 0x3b, 0x7f, 0x38, 0xb2, 0xe3, 0x8c, 0x74,
	0x13, 0x08, 0xa9, 0xb7, 0xbe, 0xcf, 0x7e, 0xbf, 0xef, 0x7b, 0xf5, 0x0b, 0xf8, 0x4c, 0x49, 0x29,
	0x98, 0xbe, 0xaa, 0xf6, 0x4a, 0x2b, 0x34, 0x74, 0x65, 0xb8, 0x82, 0x09, 0xde, 0x2c, 0xe9, 0xa7,
	0x45, 0x12, 0x51, 0x9c, 0xa0, 0x77, 0x30, 0x60, 0x25, 0x9f, 0x7b, 0x17, 0xde, 0xe5, 0xec, 0xc3,
	0xd9, 0x55, 0xd7, 0x84, 0x55, 0x59, 0xa6, 0x92, 0xef, 0x9a, 0x4a, 0x10, 0x73, 0x01, 0x21, 0x38,
	0xb9, 0x51, 0xbc, 0x99, 0x3f, 0xbf, 0xf0, 0x2e, 0xa7, 0xc4, 0xfe, 0x0e, 0x79, 0x0f, 0x95, 0xe0,
	0xff, 0x46, 0xbd, 0x82, 0xd1, 0x5e, 0x68, 0xca, 0x14, 0x17, 0x16, 0xf7, 0x82, 0x0c, 0xf7, 0x42,
	0x63, 0xc5, 0xc5, 0x83, 0xcb, 0xa0, 0xe7, 0xb2, 0x81, 0xa9, 0x71, 0x89, 0x08, 0x89, 0x89, 0xb1,
	0xe9, 0xb7, 0x7b, 0x87, 0xed, 0x21, 0xf8, 0xdd, 0x11, 0xe5, 0xa2, 0x66, 0x16, 0x3f, 0x26, 0x13,
	0x77, 0xbe, 0x14, 0x35, 0x0b, 0x37, 0x6d, 0xe8, 0xc5, 0xb7, 0xdd, 0xb5, 0x99, 0xff, 0x25, 0x0c,
	0xb3, 0xb4, 0x14, 0x34, 0xe7, 0x0e, 0x76, 0x6a, 0xca, 0x15, 0x47, 0x6f, 0x61, 0x96, 0x73, 0x21,
	0x75, 0xae, 0x1b, 0xaa, 0x55, 0x21, 0xa4, 0x83, 0xf9, 0x9d, 0xba, 0x33, 0x62, 0xf8, 0xcb, 0xeb,
	0xf1, 0x12, 0xfc, 0x77, 0xde, 0x3f, 0xa6, 0x7e, 0x12, 0x7b, 0xf0, 0x24, 0x36, 0x3a, 0x07, 0xa8,
	0x45, 0x5d, 0xe7, 0x4a, 0x1a, 0xf4, 0x89, 0xbd, 0x30, 0x76, 0xca, 0x8a, 0x87, 0x05, 0xf8, 0x26,
	0x05, 0x89, 0xb6, 0xeb, 0xc5, 0x77, 0x33, 0xd7, 0x1b, 0x98, 0xa6, 0xf7, 0xfa, 0x96, 0xb2, 0xdb,
	0x54, 0x4a, 0x71, 0xe7, 0xc2, 0x4c, 0x8c, 0x86, 0x5b, 0x09, 0xcd, 0x61, 0x98, 0x32, 0xa6, 0xee,
	0xa5, 0x76, 0xa3, 0x75, 0xe5, 0x23, 0xb3, 0xc1, 0x63, 0xb3, 0xaf, 0x07, 0x66, 0xc7, 0x3f, 0xc9,
	0x97, 0xf6, 0x85, 0xd7, 0xf1, 0xe7, 0x15, 0x36, 0xd9, 0xcf, 0x01, 0xee, 0x54, 0x96, 0x33, 0xaa,
	0x9b, 0xaa, 0x05, 0xfa, 0x64, 0x6c, 0x15, 0xb3, 0x44, 0xe8, 0x35, 0xb4, 0x05, 0xad, 0x8a, 0xcc,
	0xed, 0xe3, 0xc8, 0x0a, 0xdb, 0x22, 0x3b, 0x64, 0x25, 0xf8, 0x18, 0xd6, 0x7b, 0x06, 0x93, 0xde,
	0xf2, 0xa2, 0x39, 0x9c, 0x19, 0xf4, 0x8f, 0x88, 0xc4, 0x74, 0xbb, 0x5e, 0xe0, 0xe8, 0x3a, 0x5e,
	0x2f, 0x23, 0x12, 0x3c, 0x43, 0x3e, 0x8c, 0x1f, 0x56, 0x34, 0xf0, 0xd0, 0x14, 0x46, 0xdd, 0x4a,
	0x04, 0x01, 0x9a, 0x01, 0xfc, 0xf9, 0xb7, 0x02, 0xd4, 0x5d, 0xb6, 0x09, 0x83, 0x9f, 0x37, 0xa7,
	0xf6, 0xfb, 0xfc, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xca, 0x12, 0xa1, 0xf9, 0xb0, 0x03, 0x00,
	0x00,
}
